// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

export component LineEditBase inherits HorizontalLayout {
    in-out property <string> placeholder-text;
    in-out property <length> font-size <=> text-input.font-size;
    in-out property <string> text <=> text-input.text;
    in-out property <brush> placeholder-color;
    in-out property <bool> enabled <=> text-input.enabled;
    in-out property <bool> has-focus: text-input.has-focus;
    in-out property <InputType> input-type <=> text-input.input-type;
    in-out property <TextHorizontalAlignment> horizontal-alignment <=> text-input.horizontal-alignment;
    in-out property <bool> read-only <=> text-input.read-only;
    in property <int> font-weight <=> text-input.font-weight;
    in property <brush> text-color;
    in property <color> selection-background-color <=> text-input.selection-background-color;
    in property <color> selection-foreground-color <=> text-input.selection-foreground-color;
    in property <image> icon;
    in property <bool> colorize-icon;
    in property <length> icon-width;
    in property <bool> icon-right;

    callback accepted( /* text */ string);
    callback edited(/* text */ string);

    public function set-selection-offsets(start: int, end: int) {
        text-input.set-selection-offsets(start, end);
    }

    public function select-all() {
        text-input.select-all();
    }

    public function clear-selection() {
        text-input.clear-selection();
    }

    public function cut() {
        text-input.cut();
    }

    public function copy() {
        text-input.copy();
    }

    public function paste() {
        text-input.paste();
    }


    private property <bool> has-icon: root.icon.width > 0 && root.icon.height > 0;
    private property <length> margin: root.padding-left + root.padding-right + (root.has-icon ? root.spacing : 0);

    min-height: text-input.preferred-height;

    forward-focus: text-input;

    if (root.has-icon && !root.icon-right) : Image {
        y: (parent.height - self.height) / 2;
        width: root.icon-width;
        source <=> root.icon;
        colorize: root.colorize-icon ? root.text-color : transparent;
    }

    Rectangle {
        clip: true;
            
        placeholder := Text {
            width: 100%;
            height: 100%;
            vertical-alignment: center;
            text: (root.text == "" && text-input.preedit-text == "") ? root.placeholder-text : "";
            font-size:  text-input.font-size;
            font-italic: text-input.font-italic;
            font-weight: text-input.font-weight;
            font-family: text-input.font-family;
            color: root.placeholder-color;
            horizontal-alignment: root.horizontal-alignment;
        }

        text-input := TextInput {
            property <length> computed-x;

            x: min(0px, max(parent.width - self.width - self.text-cursor-width, self.computed-x));
            width: max(parent.width - self.text-cursor-width, self.preferred-width);
            height: 100%;
            vertical-alignment: center;
            single-line: true;
            color: root.text-color;

            cursor-position-changed(cpos) => {
                if (cpos.x + self.computed_x < root.margin) {
                    self.computed_x = - cpos.x + root.margin;
                } else if (cpos.x + self.computed_x > parent.width - root.margin - self.text-cursor-width) {
                    self.computed_x = parent.width - cpos.x - root.margin - self.text-cursor-width;
                }
            }

            accepted => { root.accepted(self.text); }

            edited => { root.edited(self.text); }
        }
    }

    
    if (root.has-icon && root.icon-right) : Image {
        y: (parent.height - self.height) / 2;
        width: root.icon-width;
        source <=> root.icon;
        colorize: root.colorize-icon ? root.text-color : transparent;
    }
}
